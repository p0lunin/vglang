data Foo = A | B Int
/*| C { a: Int, b: Int }*/

caseFoo: Foo -> Int
caseFoo x = case x of
    Foo.A => 1
    Foo.B v => v ?>
// --------------
// caseFoo(_0): Enum[Foo]) -> Int
// _1 = D[_0] // discriminant of x
// _2 = D[Foo.A]
// case _1 _2 {
//  _3 = 1
//  ret _3
// }
// _3 = D[Foo.B]
// case _1 _3 {
//  _4 = F[Foo.B|0] _0
//  ret _4
// }
//

makeA: Foo
makeA = Foo.A

add: Int -> Int -> Int
add x y = x + y

add1: Int -> Int
add1 x = x + 1

call: Int -> (Int -> Int -> Int) -> Int
call x f = x `f` 1
// -----------
// call(_0: Int, _1: *func(Int, Int, Int)) -> Int
// _2 = 1
// _3 = @map[_0, _2]
// _4 = @call _1 _3
// ret _4

let': Int -> Int
let' x = let foo = x + 1 in foo + 1

case': Int -> Int
case' x = case x of _ => x ?>

generics<a>: a -> a
generics x = x

data GenData<a> = Build a

gen_struct<a>: a -> (GenData a)
gen_struct x = GenData.Build x

gen_struct_int: Int -> (GenData Int)
gen_struct_int x = GenData.Build x

gen_struct_int': Int -> (GenData Int)
gen_struct_int' x = GenData.Build x

data List<a> = Nil | Cons a (List a)

cons<a>: a -> List a -> List a
cons x xs = List.Cons x xs

nil<a>: List a
nil = List.Nil

nsert_sorted: Int -> List Int -> List Int
nsert_sorted x xs = case xs of
    List.Nil => cons x nil
    List.Cons y xs' => case x < y of
        Bool.True => x `cons` (cons y xs')
        Bool.False => y `cons` (nsert_sorted x xs') ?>?>

sort_inner: List Int -> List Int -> List Int
sort_inner xs ys = case xs of
    List.Nil => ys
    List.Cons x xs' => sort_inner xs' (nsert_sorted x ys) ?>

sort: List Int -> List Int
sort xs = sort_inner xs nil

gen: Int -> List Int
gen x = case x == 0 of
    Bool.True => nil
    Bool.False => cons x (gen (x - 1)) ?>
// --------------
// gen(_0: Int) -> ListInt
// _1 = 0
// _2 = _0 == _1
// _3 = D[Bool.False]
// case _2 _3 {
//  _4 = D[List.Nil]
//  _5 = @map [_4]
//  ret _6
// }
// _4 = D[Bool.True]
// case _2 _4 {
//  _5 = 1
//  _6 = _0 - _5
//  _7 = @map[_6]
//  _8 = gen
//  _9 = @call _8 _7
//  _10 = @alloc _9
//  _11 = D[List.Cons]
//  _12 = @map[_11 _0 _10] // List.Cons x gen(x - 1)
//  ret _12
// }
//

/*
trait Foo a where
    bar: a -> a

instance Foo Int where
    bar: Int -> Int
    bar x = x
*/
